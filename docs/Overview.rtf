{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Overview\
\'97\
This is my remake of Curiosity: What\'92s Inside The Cube? by 22 Cans. A giant cube is picked away layer by layer, one square at a time, by multiple players tapping away on individual squares. Tapping earns coins which the players can spend on upgrades (eg. tap away bigger areas for a few times, or get a longer time expiry for chaining taps). The cube updates in realtime for all players, so they can see the activity of others.\
\
Architecture\
\'97\
A graphical client (OS X and maybe iOS) lets the player view the current layer of the cube, zoom in and click individual squares to \'91pop\'92 them. The client shows activity by other users in realtime. This could be made with Unity since it supports run-time modification of textures.\
\
A text-mode test client (buildable on Linux as well as OS X) moves around the cube and taps squares, reporting its activity every 10 seconds or so on the console.\
\
A dispatcher receives initial client connections, chooses a player server based on load balancing and passes player server connection info and credentials back to the client. This allows queueing connections.\
\
A player server supports connections from multiple clients, receiving input and passing it to the backend server. It provides clients with the textures for the current and next cube layers. It regularly updates the clients with diffs and full updates of the current layer (or a subset depending how zoomed in they are).\
\
A backend server tracks the state of the current layer, recording which user clicked which cube and when so there is a strict ordering of pops. Each pop is journaled to disk. A few times a second the backend server updates all the connected player servers with a diff of the current layer and also if the layer has been cleared, starting the new layer.\
\
A journal processor takes the current layer and player file, applies the journal updates and writes out new layer and player files.\
\
Backend server\
\'97\
Receives commands (eg. pop this square, buy this powerup, use this powerup) from all connected player servers with their timestamps. Organises the commands into a strict time order and applies them one by one to the player database and cube layer. One command may cause several modifications to the game state (eg. use a big-tap powerup causes the number of big taps available to decrement and potentially multiple taps to happen). The command and all ensuing state changes are recorded as a single line of text, with a trailing checksum, and appended to the journal file.\
\
Coordinate system\
\'97\
The cube has six named sides; top, north, south, east, west and bottom. Viewed from above (ie. looking down at top), west is to the left and east to the right. The \'91home\'92 face for any cube is determined from the faces it touches by priority order: top, then north, then west, then east, then south and, lastly, bottom. This means that the bottom face has no edge cubes. 0,0 is always at the upper-left corner of a face when viewed head-on.\
\
All cubes have a unique numeric index. If the cube is n-large, the top face cubes are 0 to n^2-1, the north face cubes which don\'92t touch the top face are n^2 to 2n^2-n-1, the west face cubes which touch neither the top nor north faces are 2n^2-n to 3n^2-3n and so on.\
\
Journal processor\
\'97\
Loads the player and cube layer file and reads the journal file line by line. Each journal line has a checksum at the end. If a broken line is found the update stops and emits an error, the journal file will usually have to be fixed by hand.\
\
Each journal line sets the value of one or more properties in the player and/or cube file. Properties are attribute=value pairs where the value is a simple string or a compound value represented by \{, zero or more properties (including compound properties) and \}. The cube and other data files must have an \'91id\'92 property at their top level, which is the name used in the journal file to find a particular property.\
\
Journal lines have at least one attribute=value pair, where the attribute name is of the form file_id.attribute.sub_attribute.sub_sub_attribute and so on, describing how to locate the specific attribute. If the attribute already exists its value is updated. If not, it is created along with any parent attributes (as compound values). Trying to set a simple value on an existing attribute with a compound value is an error and will require the journal file to be fixed.\
}